{"version":3,"sources":["components/Stepper/Stepper.tsx","components/BookButton/BookButton.tsx","containers/TreatmentContainer/TreatmentContainer.tsx","components/ServiceList/Service.tsx","views/Service.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","width","backButton","marginRight","spacing","instructions","marginTop","marginBottom","body","fontFamily","HorizontalLabelPositionBelowStepper","classes","steps","useState","activeStep","setActiveStep","useEffect","window","location","pathname","className","alternativeLabel","map","label","key","ContainerUl","styled","ul","ContainerLi","li","BookButton","props","to","Button","variant","size","state","treatmentId","treatmentName","disabled","undefined","Object","keys","length","values","getTreatments","a","response","fetchData","axios","get","endpoints","then","res","data","catch","error","console","log","replace","baseURL","heading","fontSize","typography","pxToRem","fontWeight","fontWeightBold","createMuiTheme","body1","Service","treatment","setTreatment","setTreatmentName","api","fetchMyApi","mapTreatments","listOfTreatmentTypes","obj","prop","indexOf","push","keyName","i","ExpansionPanelDetails","FormGroup","FormControlLabel","control","Checkbox","checked","treatment1","icon","checkedIcon","onChange","handleChange","id","value","beforeTreatmentSelectionState","selectedTreatment","setSelectedTreatment","parentCallBack","name","event","pushTreatments","tName","array","treatmentNameArray","includes","index","splice","ThemeProvider","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","aria-controls","Typography","About","TreatmentType","ID","TreatmentName","Price","Duration","Divider","setTreatmentId","JSON","stringify","Stepper","PageTitle","title"],"mappings":"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","file":"static/js/12.e78ecbab.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '600px',\n    },\n    backButton: {\n      marginRight: theme.spacing(1),\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n    body: {\n      fontFamily: 'Abril Fatface',\n    },\n  })\n);\n\nfunction getSteps() {\n  return [\n    'Select a treatment',\n    'Select a time',\n    'Fill in your contact details',\n    'Booking summary',\n  ];\n}\n\nexport default function HorizontalLabelPositionBelowStepper() {\n  const classes = useStyles();\n  const steps = getSteps();\n  const [activeStep, setActiveStep] = useState(0);\n\n  useEffect(() => {\n    switch (window.location.pathname) {\n      case '/treatment':\n        setActiveStep(0);\n        break;\n      case '/book':\n        setActiveStep(1);\n        break;\n      case '/confirmation':\n        setActiveStep(2);\n        break;\n      case '/order':\n        setActiveStep(3);\n        break;\n      default:\n        setActiveStep(-1);\n    }\n  }, []);\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep} alternativeLabel>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel classes={{ alternativeLabel: classes.body }}>\n              {label}\n            </StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  );\n}\n","import React from 'react';\nimport Line from '../Line/Line';\nimport Button from 'react-bootstrap/Button';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst ContainerUl = styled.ul`\n  padding-top: 20px;\n  text-align: center;\n  list-style: none;\n  font-family: 'Abril Fatface', cursive;\n\n  &:hover {\n    color: #282c34;\n  }\n`;\n\nconst ContainerLi = styled.li`\n  display: inline;\n  padding-right: 20px;\n\n  &:hover {\n    color: #282c34;\n  }\n`;\n\nconst BookButton: React.FunctionComponent = (props: any) => {\n  const isDisabled = () => {\n    if (\n      props.treatmentId === undefined ||\n      Object.keys(props.treatmentId).length === 0 ||\n      props.treatmentId === 0 ||\n      Object.values(props.treatmentId)[0] === 0\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return (\n    <>\n      <ContainerUl>\n        <ContainerLi>\n          <Link\n            to={{\n              pathname: '/',\n            }}\n          >\n            <Button variant=\"outline-secondary\" size=\"lg\">\n              Back\n            </Button>\n          </Link>\n        </ContainerLi>\n        <ContainerLi>\n          <Link\n            to={{\n              pathname: '/book',\n              state: {\n                treatmentId: props.treatmentId,\n                treatmentName: props.treatmentName,\n              },\n            }}\n          >\n            <Button\n              variant=\"outline-secondary\"\n              size=\"lg\"\n              disabled={isDisabled()}\n            >\n              Next\n            </Button>\n          </Link>\n        </ContainerLi>\n      </ContainerUl>\n    </>\n  );\n};\n\nexport default BookButton;\n","import axios from 'axios';\nimport * as endpoints from '../../Api/endpoints';\nimport { baseURL } from '../../config/merchantConfig/config';\n\nexport const getTreatments = async () => {\n  var response: any = null;\n\n  const fetchData = async () => {\n    await axios\n      .get(`${endpoints.treatment}`)\n      .then((res) => {\n        response = res.data;\n      })\n      .catch((error) => {\n        console.log(error);\n        return window.location.replace(`${baseURL}/error`);\n      });\n  };\n  await fetchData();\n  return response;\n};\n","import React, { useState, useEffect } from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Favorite from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\nimport { ThemeProvider } from '@material-ui/styles';\nimport {\n  Theme,\n  createStyles,\n  makeStyles,\n  createMuiTheme,\n} from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport * as api from '../../containers/TreatmentContainer/TreatmentContainer';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      fontFamily: 'Abril Fatface',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontFamily: 'Abril Fatface',\n      fontWeight: theme.typography.fontWeightBold,\n    },\n  })\n);\n\nconst theme = createMuiTheme({\n  typography: {\n    body1: {\n      fontFamily: 'Abril Fatface',\n    },\n  },\n});\n\nconst Service: React.FunctionComponent<any> = (props: any) => {\n  const [treatment, setTreatment]: any = useState();\n  const [treatmentName, setTreatmentName] = useState(['NoTreatmentAvailable']);\n  useEffect(() => {\n    async function fetchMyApi() {\n      const res = await api.getTreatments();\n      setTreatment(res);\n      // console.log('treatments: ' + res);\n    }\n    fetchMyApi();\n  }, []);\n\n  // Saving the information when navigating back\n  // useEffect(() => {\n  //   console.log(\n  //     'inside service: ' + JSON.stringify(props.history.location.state)\n  //   );\n  //   if (props.history.location.state.treatmentId !== undefined) {\n  //     setSelectedTreatment(props.history.location.state.treatmentId);\n  //     setTreatmentName(props.history.location.state.treatmentName);\n  //   }\n  // }, [props]);\n\n  const mapTreatments = () => {\n    var listOfTreatmentTypes: any[] = [];\n\n    if (treatment === null || treatment === undefined) {\n      return null;\n    } else {\n      for (var key in treatment) {\n        var obj = treatment[key];\n\n        for (var prop in obj) {\n          if (prop === 'treatmentType') {\n            // console.log(prop + ' = ' + obj[prop]);\n            if (Object.values(listOfTreatmentTypes).indexOf(obj[prop]) <= -1) {\n              listOfTreatmentTypes.push(obj[prop]);\n            }\n          }\n        }\n      }\n      // console.log(Object.values(listOfTreatmentTypes).indexOf(2));\n      //TO GET Available treatment Types\n      // for (var type in listOfTreatmentTypes) {\n      //   // console.log(listOfTreatmentTypes[type]);\n      //   // treatmentTypes.push(listOfTreatmentTypes[type]);\n      // }\n      // console.log(listOfTreatmentTypes);\n      if (Object.values(listOfTreatmentTypes).indexOf(2)) {\n        Object.keys(treatment).map((keyName, i) => {\n          // console.log(treatment[keyName]);\n          return (\n            <ExpansionPanelDetails>\n              <FormGroup>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={treatment.treatment1}\n                      icon={<FavoriteBorder />}\n                      checkedIcon={<Favorite />}\n                      onChange={handleChange(\n                        treatment[keyName].id,\n                        treatment[keyName].treatmentName\n                      )}\n                      value=\"treatment1\"\n                    />\n                  }\n                  label=\"Treatment 1 with a very very long description\"\n                />\n              </FormGroup>\n            </ExpansionPanelDetails>\n          );\n        });\n      }\n    }\n    // console.log(treatment);\n  };\n\n  useEffect(() => {\n    mapTreatments();\n    // mapTreatmentTypes();\n    beforeTreatmentSelectionState();\n    console.log(treatment);\n  }, [treatment]);\n\n  const classes = useStyles();\n  const beforeTreatmentSelectionState = () => {\n    if (treatment === null || treatment === undefined) {\n      return null;\n    } else {\n      Object.keys(treatment).map((keyName, i) => {\n        return console.log(treatment[keyName].id);\n      });\n    }\n  };\n\n  const [selectedTreatment, setSelectedTreatment] = useState([0]);\n  useEffect(() => {\n    props.parentCallBack(selectedTreatment, treatmentName);\n  }, [treatment, treatmentName, props, selectedTreatment]);\n  //   () => {\n  //   if (treatment === null || treatment === undefined) {\n  //     return null;\n  //   }\n  //   Object.keys(treatment).map((keyName, i) => {\n  //     return (treatment[keyName].id = false);\n  //   });\n  // }\n\n  const handleChange = (name: number, treatmentName: string) => (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    // setSelectedTreatment({\n    //   ...selectedTreatment,\n    //   [name]: event.target.checked,\n    // });\n\n    // var array: string[] = [...selectedTreatment];\n    // console.log(name);\n    // if (array.includes(name)) {\n    //   var index = array.indexOf(name);\n    //   array.splice(index, 1);\n    // } else {\n    //   array.push(name);\n    // }\n    // setSelectedTreatment(array);\n    pushTreatments(name, treatmentName);\n  };\n\n  const pushTreatments = (name: number, tName: string) => {\n    var array: number[] = [...selectedTreatment];\n    var treatmentNameArray: string[] = [...treatmentName];\n    console.log(name);\n    if (array.includes(name)) {\n      var index = array.indexOf(name);\n      array.splice(index, 1);\n      console.log('removed: ' + array);\n    } else {\n      array.push(name);\n      console.log('added: ' + array);\n    }\n    if (array.includes(0)) {\n      index = array.indexOf(0);\n      array.splice(index, 1);\n    }\n    setSelectedTreatment(array);\n    // TODO: if treatment name is the same, we can fix this by calling the treatment/{id} endpoint\n    if (treatmentNameArray.includes(tName)) {\n      index = treatmentNameArray.indexOf(tName);\n      treatmentNameArray.splice(index, 1);\n      console.log(treatmentNameArray);\n    } else {\n      treatmentNameArray.push(tName);\n      console.log(treatmentNameArray);\n    }\n    if (treatmentNameArray.includes('NoTreatmentAvailable')) {\n      index = treatmentNameArray.indexOf('NoTreatmentAvailable');\n      treatmentNameArray.splice(index, 1);\n    }\n    console.log('ARRAY ' + treatmentNameArray);\n    setTreatmentName(treatmentNameArray);\n  };\n\n  // useEffect(() => {\n  //   for (var key in treatment) {\n  //     var obj = treatment[key];\n  //     var defaultSelected: any;\n  //     console.log(obj);\n  //     for (var prop in obj) {\n  //       if (prop === 'treamentId') {\n  //         console.log(prop + ' = ' + obj[prop]);\n  //         if (Object.values(defaultSelected).indexOf(obj[prop]) <= -1) {\n  //           defaultSelected.push(obj[prop]);\n  //           console.log(defaultSelected);\n  //         }\n  //       }\n  //     }\n  //     console.log(defaultSelected);\n  //   }\n\n  // var newTreatments = treatment;\n  // var newSelectedTreatment: any = [];\n  // Object.entries(newTreatments).forEach(entry => {\n  //   if (entry[1] === true) {\n  //     newSelectedTreatment.push(entry[0]);\n  //   }\n  // });\n  // // console.log(newSelectedTreatment);\n  // setSelectedTreatment(newSelectedTreatment);\n  // console.log(selectedTreatment);\n  // }, []);\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        {mapTreatments}\n        <ExpansionPanel defaultExpanded={true}>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography className={classes.heading}>Natural Care</Typography>\n          </ExpansionPanelSummary>\n          {/* style={{ fontFamily: 'Abril Fatface' }} */}\n          {treatment !== undefined\n            ? Object.keys(treatment).map((keyName, i) => {\n                // console.log(\n                //   'key- ' +\n                //     JSON.stringify(treatment[keyName].About.TreatmentType)\n                // );\n                if (treatment[keyName].About.TreatmentType === 'Natural Care') {\n                  return (\n                    <ExpansionPanelDetails>\n                      <FormGroup>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={treatment.treatment1}\n                              icon={<FavoriteBorder />}\n                              checkedIcon={<Favorite />}\n                              onChange={handleChange(\n                                treatment[keyName].ID,\n                                treatment[keyName].About.TreatmentName\n                              )}\n                              value={`${treatment[keyName].ID}`}\n                            />\n                          }\n                          label={`${treatment[keyName].About.TreatmentName} `}\n                        />\n                        <p>{`£${treatment[keyName].About.Price} - ${treatment[keyName].About.Duration}mins`}</p>\n                        <Divider />\n                      </FormGroup>\n                    </ExpansionPanelDetails>\n                  );\n                } else {\n                  return null;\n                }\n              })\n            : null}\n        </ExpansionPanel>\n        {/* Panel 2 */}\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography className={classes.heading}>SNS</Typography>\n          </ExpansionPanelSummary>\n          {treatment !== undefined\n            ? Object.keys(treatment).map((keyName, i) => {\n                // console.log(treatment[keyName]);\n                if (treatment[keyName].About.TreatmentType === 'SNS') {\n                  return (\n                    <ExpansionPanelDetails>\n                      <FormGroup>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={treatment.treatment1}\n                              icon={<FavoriteBorder />}\n                              checkedIcon={<Favorite />}\n                              onChange={handleChange(\n                                treatment[keyName].ID,\n                                treatment[keyName].About.TreatmentName\n                              )}\n                              value={`${treatment[keyName].ID}`}\n                            />\n                          }\n                          label={`${treatment[keyName].About.TreatmentName}`}\n                        />\n                        <p>{`£${treatment[keyName].About.Price} - ${treatment[keyName].About.Duration}mins`}</p>\n                        <Divider />\n                      </FormGroup>\n                    </ExpansionPanelDetails>\n                  );\n                } else {\n                  return null;\n                }\n              })\n            : null}\n        </ExpansionPanel>\n        {/* PANEL 3 */}\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography className={classes.heading}>Acrylic</Typography>\n          </ExpansionPanelSummary>\n          {treatment !== undefined\n            ? Object.keys(treatment).map((keyName, i) => {\n                // console.log(treatment[keyName]);\n                if (treatment[keyName].About.TreatmentType === 'Acrylic') {\n                  return (\n                    <ExpansionPanelDetails>\n                      <FormGroup>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={treatment.treatment1}\n                              icon={<FavoriteBorder />}\n                              checkedIcon={<Favorite />}\n                              onChange={handleChange(\n                                treatment[keyName].ID,\n                                treatment[keyName].About.TreatmentName\n                              )}\n                              value={`${treatment[keyName].ID}`}\n                            />\n                          }\n                          label={`${treatment[keyName].About.TreatmentName}`}\n                        />\n                        <p>{`£${treatment[keyName].About.Price} - ${treatment[keyName].About.Duration}mins`}</p>\n                        <Divider />\n                      </FormGroup>\n                    </ExpansionPanelDetails>\n                  );\n                } else {\n                  return null;\n                }\n              })\n            : null}\n        </ExpansionPanel>\n        {/* PANEL 4 */}\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography className={classes.heading}>Gel Powder</Typography>\n          </ExpansionPanelSummary>\n          {treatment !== undefined\n            ? Object.keys(treatment).map((keyName, i) => {\n                // console.log(treatment[keyName]);\n                if (treatment[keyName].About.TreatmentType === 'Gel Powder') {\n                  return (\n                    <ExpansionPanelDetails>\n                      <FormGroup>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={treatment.treatment1}\n                              icon={<FavoriteBorder />}\n                              checkedIcon={<Favorite />}\n                              onChange={handleChange(\n                                treatment[keyName].ID,\n                                treatment[keyName].About.TreatmentName\n                              )}\n                              value={`${treatment[keyName].ID}`}\n                            />\n                          }\n                          label={`${treatment[keyName].About.TreatmentName}`}\n                        />\n                        <p>{`£${treatment[keyName].About.Price} - ${treatment[keyName].About.Duration}mins`}</p>\n                        <Divider />\n                      </FormGroup>\n                    </ExpansionPanelDetails>\n                  );\n                } else {\n                  return null;\n                }\n              })\n            : null}\n        </ExpansionPanel>\n      </ThemeProvider>\n    </>\n  );\n};\n\nexport default Service;\n","import React, { useState, useEffect } from 'react';\nimport BookButton from '../components/BookButton';\nimport PageTitle from '../components/PageTitle';\nimport TreatmentList from '../components/ServiceList';\nimport Stepper from '../components/Stepper/Stepper';\n\nconst Service: React.FunctionComponent = (props: any) => {\n  const [treatmentId, setTreatmentId] = useState();\n  const [treatmentName, setTreatmentName] = useState();\n\n  const treatmentSelected = (treatmentId: any, treatmentName: any) => {\n    setTreatmentId(treatmentId);\n    setTreatmentName(treatmentName);\n  };\n  useEffect(() => {\n    console.log('Treatments: ' + JSON.stringify(props));\n  }, []);\n\n  return (\n    <div>\n      <Stepper />\n      <PageTitle title=\"Available Treatments\" />\n      <TreatmentList parentCallBack={treatmentSelected} {...props} />\n      <BookButton\n        treatmentId={treatmentId}\n        treatmentName={treatmentName}\n        {...props}\n      >\n        Book Now\n      </BookButton>\n    </div>\n  );\n};\n\nexport default Service;\n"],"sourceRoot":""}