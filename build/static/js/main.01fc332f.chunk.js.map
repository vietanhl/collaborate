{"version":3,"sources":["views/LoadableView.tsx","components/Footer/Footer.tsx","components/Callback/Callback.tsx","containers/AdminCalendarContainer/AdminCalendarContainer.tsx","components/AdminCalendar/AdminCalendar.tsx","Api/Api.tsx","App.tsx","serviceWorker.ts","index.tsx","config/merchantConfig/config.tsx","components/Line/Line.tsx","Auth/auth.ts","components/PageTitle/PageTitle.tsx","components/LoginButton/LoginButton.tsx","components/Logout/Logout.tsx","components/Menu/Menu.tsx","config/index.ts","Api/endpoints.ts"],"names":["HomePageView","Loadable","loader","loading","Spinner","color","TreatmentView","ContactView","LoginView","BookView","ConfirmationView","OrderView","ErrorPageView","SocialIcon","require","StyledFooter","styled","div","StyledText","p","Footer","Line","url","instagram","style","marginRight","network","onClick","window","open","email","companyName","Callback","props","useEffect","test","location","hash","Error","console","log","auth","handleAuthentication","getAvailability","date","a","response","fetchData","axios","get","endpoints","then","res","data","catch","error","AdminCalendar","localizer","momentLocalizer","moment","now","Date","useState","toISOString","substring","dateReq","setDateReq","id","title","start","end","employee","event","setEvent","api","eventsMapped","map","booking","parseInt","ID","Info","Client","FirstName","StartTime","EndTime","EmployeeId","fetchMyApi","height","width","fontSize","events","startAccessor","endAccessor","defaultDate","toDate","defaultView","dayLayoutAlgorithm","timeslots","formats","dateFormat","weekdayFormat","min","getFullYear","getMonth","getDate","max","step","eventPropGetter","backgroundColor","onNavigate","view","Api","Auth","history","Menu","PageTitle","Header","body","App","exact","path","component","isAuthenticated","userHasScopes","to","Boolean","hostname","match","ReactDOM","render","forceRefresh","document","getElementById","navigator","serviceWorker","ready","registration","unregister","companyPhone","address","baseURL","StyledLine","hr","userProfile","auth0","requestedScopes","login","localStorage","setItem","JSON","stringify","authorize","parseHash","err","authResult","accessToken","idToken","setSession","redirectLocation","getItem","parse","push","alert","removeItem","expiresAt","expiresIn","getTime","scopes","scope","logout","clientID","process","returnTo","getAccessToken","grantedScopes","split","every","includes","this","WebAuth","domain","redirectUri","responseType","audience","Title","className","LoginButton","Button","variant","size","Logout","ContainerUl","ul","ContainerLi","li","ContainerLogo","config","API_BASE_URL","availability","book","treatment","bookedAppointments"],"mappings":"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","file":"static/js/main.01fc332f.chunk.js","sourcesContent":["import Loadable from 'react-loadable';\nimport React from 'react';\nimport { Spinner } from 'reactstrap';\n\nexport const HomePageView = Loadable({\n  loader: () => import('./Homepage'),\n  loading: () => <Spinner color=\"dark\" />,\n});\n\nexport const TreatmentView = Loadable({\n  loader: () => import('./Service'),\n  loading: () => <Spinner color=\"dark\" />,\n});\n\nexport const ContactView = Loadable({\n  loader: () => import('./Contact'),\n  loading: () => <Spinner color=\"dark\" />,\n});\n\nexport const LoginView = Loadable({\n  loader: () => import('./Login'),\n  loading: () => <Spinner color=\"dark\" />,\n});\n\nexport const BookView = Loadable({\n  loader: () => import('./Book'),\n  loading: () => <Spinner color=\"dark\" />,\n});\n\nexport const ConfirmationView = Loadable({\n  loader: () => import('./Confirm'),\n  loading: () => <Spinner color=\"dark\" />,\n});\n\nexport const OrderView = Loadable({\n  loader: () => import('./Order'),\n  loading: () => <Spinner color=\"dark\" />,\n});\n\nexport const ErrorPageView = Loadable({\n  loader: () => import('./ErrorPage'),\n  loading: () => <Spinner color=\"dark\" />,\n});\n","import React from 'react';\nimport Line from '../Line/Line';\nimport styled from 'styled-components';\nimport {\n  companyName,\n  instagram,\n  email,\n} from '../../config/merchantConfig/config';\nconst { SocialIcon } = require('react-social-icons');\n\nconst StyledFooter = styled.div`\n  text-align: center;\n  list-style: none;\n  font-family: 'Abril Fatface', cursive;\n  background-color: white;\n  padding-bottom: 20px;\n  padding-top: 20px;\n  color: #282c34;\n`;\nconst StyledText = styled.p`\n  background-color: white;\n`;\nconst Footer: React.FunctionComponent = () => {\n  const sendEmail = () => {\n    {\n      window.open(`mailto:${email}`);\n    }\n  };\n  return (\n    <StyledFooter>\n      <Line />\n\n      <StyledText>\n        <SocialIcon url={instagram} style={{ marginRight: '20px' }} />\n        <SocialIcon\n          network=\"email\"\n          onClick={sendEmail}\n          style={{ marginRight: '20px' }}\n        />\n        <b>© {companyName} - January 2020</b>\n      </StyledText>\n    </StyledFooter>\n  );\n};\n\nexport default Footer;\n","import React, { useEffect } from \"react\";\n\nconst Callback = (props: any) => {\n  //handle authentication if expected values are in the URL.\n  useEffect(() => {\n    if (/access_token|id_token|error/.test(props.location.hash)) {\n      console.log(props.auth);\n      props.auth.handleAuthentication();\n    } else {\n      throw new Error(\"Invalid callback URL.\");\n    }\n  }, [props.auth, props.location.hash]);\n  return (\n    <div>\n      <p>Loading ...</p>\n    </div>\n  );\n};\n\nexport default Callback;\n","import axios from 'axios';\nimport * as endpoints from '../../Api/endpoints';\n\nexport const getAvailability = async (date: string) => {\n  var response: any = null;\n  const fetchData = async () => {\n    await axios\n      .get(`${endpoints.bookedAppointments}/${date}`)\n      .then((res) => {\n        response = res.data;\n      })\n      .catch((error) => {\n        console.log('error ' + error);\n      });\n  };\n  await fetchData();\n  return response;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport * as api from '../../containers/AdminCalendarContainer/AdminCalendarContainer';\n\nconst AdminCalendar: React.FunctionComponent = (props: any) => {\n  const localizer = momentLocalizer(moment);\n  const now = new Date();\n  const [dateReq, setDateReq] = useState(now.toISOString().substring(10, 0));\n\n  const [event, setEvent] = useState([\n    {\n      id: 15,\n      title: '1Treatment',\n      start: now,\n      end: now,\n      employee: 'test',\n    },\n  ]);\n\n  //add loading state\n\n  useEffect(() => {\n    async function fetchMyApi() {\n      const res = await api.getAvailability(dateReq);\n      const eventsMapped = res.map((booking: any) => {\n        return {\n          id: parseInt(booking.ID),\n          title: booking.Info.Client.FirstName,\n          start: new Date(booking.Info.StartTime),\n          end: new Date(booking.Info.EndTime),\n          employee: booking.EmployeeId,\n        };\n      });\n      setEvent(eventsMapped);\n    }\n    fetchMyApi();\n  }, [dateReq]);\n\n  return (\n    <div style={{ height: '800px', width: '1000px', fontSize: '10px' }}>\n      <Calendar\n        localizer={localizer}\n        events={event}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        defaultDate={moment().toDate()}\n        defaultView=\"day\"\n        dayLayoutAlgorithm=\"overlap\"\n        // timeslots={2}\n        timeslots={5}\n        // toolbar={false}\n        formats={{ dateFormat: 'D', weekdayFormat: 'dddd' }}\n        // showMultiDayTimes={true}\n        min={\n          new Date(\n            new Date().getFullYear(),\n            new Date().getMonth(),\n            new Date().getDate(),\n            9\n          )\n        }\n        max={\n          new Date(\n            new Date().getFullYear(),\n            new Date().getMonth(),\n            new Date().getDate(),\n            18\n          )\n        }\n        step={12}\n        eventPropGetter={(event: any) => ({\n          style: {\n            backgroundColor:\n              event.employee !== '5eb603958451d805f9e3215e'\n                ? '#3174ad'\n                : '#ad4ca4',\n            width: '10%',\n          },\n        })}\n        onNavigate={(date, view) => {\n          // console.log('#### date=', date.toISOString().substring(10, 0));\n          // console.log('#### view=', view);\n          setDateReq(date.toISOString().substring(10, 0));\n        }}\n      />\n    </div>\n  );\n};\n\nexport default AdminCalendar;\n","import React, { useState, useEffect } from 'react';\nimport PageTitle from '../components/PageTitle';\nimport AdminCalendar from '../components/AdminCalendar/AdminCalendar';\nimport Menu from '../components/Menu';\nimport Auth from '../Auth/auth';\n\nconst Api: React.FunctionComponent = (props: any) => {\n  const auth = new Auth(props.history);\n  // const [message, setMessage] = useState('');\n  // const [privateMessage, setPrivateMessage] = useState('');\n  // const [scopeMessage, setScopeMessage] = useState('');\n  // const [adminMessage, setAdminMessage] = useState('');\n\n  //PUBLIC\n  // const fetchPublicApi = () => {\n  //   fetch('/book')\n  //     .then(response => {\n  //       if (response.ok) return response.json();\n  //       throw new Error('Network response failed');\n  //     })\n  //     .then(response => setMessage(response.message))\n  //     .catch(error => setMessage(error.message));\n  // };\n  // useEffect(() => {\n  //   fetchPublicApi();\n  // }, []);\n\n  //PRIVATE\n  // const fetchPrivateApi = () => {\n  //   fetch('/book', {\n  //     headers: { Authorization: `Bearer ${props.auth.getAccessToken()}` },\n  //   })\n  //     .then(response => {\n  //       if (response.ok) return response.json();\n  //       throw new Error('Network response failed');\n  //     })\n  //     .then(response => setPrivateMessage(response.message))\n  //     .catch(error => setPrivateMessage(error.message));\n  // };\n\n  // useEffect(() => {\n  //   fetchPrivateApi();\n  // }, []);\n\n  //scope\n  // const fetchScopeApi = () => {\n  //   fetch('/scopes', {\n  //     headers: { Authorization: `Bearer ${props.auth.getAccessToken()}` },\n  //   })\n  //     .then(response => {\n  //       if (response.ok) return response.json();\n  //       throw new Error('Network response failed');\n  //     })\n  //     .then(response => setScopeMessage(response.message))\n  //     .catch(error => setScopeMessage(error.message));\n  // };\n\n  // useEffect(() => {\n  //   fetchScopeApi();\n  // }, []);\n\n  // //Admin role\n  // const fetchAdminApi = () => {\n  //   fetch('/admin', {\n  //     headers: { Authorization: `Bearer ${props.auth.getAccessToken()}` },\n  //   })\n  //     .then(response => {\n  //       if (response.ok) {\n  //         console.log('admin authenticated!');\n  //         return response.json();\n  //       }\n  //       throw new Error('Network response failed');\n  //     })\n  //     .then(response => setAdminMessage(response.message))\n  //     .catch(error => setAdminMessage(error.message));\n  // };\n\n  // useEffect(() => {\n  //   fetchAdminApi();\n  // }, []);\n  return (\n    <>\n      <Menu auth={auth} {...props} />\n      <PageTitle title=\"Booking Management\" />\n      <AdminCalendar {...props} />\n    </>\n  );\n};\n\nexport default Api;\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route, BrowserRouter, Redirect } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Menu from './components/Menu/Menu';\nimport {\n  HomePageView,\n  TreatmentView,\n  ContactView,\n  LoginView,\n  BookView,\n  ConfirmationView,\n  OrderView,\n  ErrorPageView,\n} from './views/LoadableView';\nimport Footer from './components/Footer/Footer';\nimport Auth from './Auth/auth';\nimport Callback from './components/Callback/Callback';\nimport Api from './Api/Api';\n//add to view\nimport ConfirmationPage from './views/Confirm';\n\nconst Container = styled.div``;\n\nconst Header = styled.body`\n  background-color: white;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: calc(15px + 1vmin);\n  color: #282c34;\n`;\n\nconst App = (props: any) => {\n  const auth = new Auth(props.history);\n\n  return (\n    <>\n      <Header>\n        <BrowserRouter>\n          {/* <Menu auth={auth} {...props} /> */}\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={(props: any) => {\n                return <HomePageView auth={auth} {...props} />;\n              }}\n            />\n            <Route\n              path=\"/home\"\n              component={(props: any) => {\n                return <HomePageView auth={auth} {...props} />;\n              }}\n            />\n            <Route path=\"/treatment\" component={TreatmentView} />\n            <Route path=\"/contact\" component={ContactView} />\n            <Route path=\"/login\" component={LoginView} />\n            <Route path=\"/book\" component={BookView} />\n            <Route path=\"/confirmation\" component={ConfirmationView} />\n            <Route path=\"/order\" component={OrderView} />\n            <Route\n              path=\"/callback\"\n              component={(props: any) => {\n                return <Callback auth={auth} {...props} />;\n              }}\n            />\n\n            {/* <Route\n              path=\"/book\"\n              component={(props: any) => {\n                return <Api auth={auth} {...props} />;\n              }}\n            /> */}\n\n            {\n              <Route\n                path=\"/scopes\"\n                component={(props: any) =>\n                  auth.isAuthenticated() &&\n                  auth.userHasScopes(['read:customer']) ? (\n                    <Api auth={auth} {...props} />\n                  ) : (\n                    <Redirect to=\"/\" />\n                  )\n                }\n              />\n            }\n            <Route path=\"*\" component={ErrorPageView} />\n          </Switch>\n        </BrowserRouter>\n      </Header>\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nReactDOM.render(\n  //force refresh - to fix callback\n  <Router forceRefresh={true}>\n    <Route component={App} />\n  </Router>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","export const companyName = 'Paper&Pen';\nexport const companyPhone = '07401427189';\nexport const instagram = 'https://www.instagram.com/01viet/';\nexport const email = 'paperandpenltd@gmail.com';\nexport const address = 'Belvedere Road, London';\nexport const baseURL = 'http://localhost:3000';\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Line = () => {\n  const StyledLine = styled.hr`\n    color: #282c34;\n    width: 100%;\n  `;\n  return <StyledLine />;\n};\n\nexport default Line;\n","import auth0 from 'auth0-js';\n\nconst REDIRECT_ON_LOGIN = 'redirect_on_login';\n\nexport default class Auth {\n  history: any;\n  userProfile: any;\n  auth0: auth0.WebAuth;\n  requestedScopes: string;\n\n  constructor(history: any) {\n    this.history = history;\n    this.userProfile = null;\n    this.requestedScopes = 'openid profile email read:customer';\n    this.auth0 = new auth0.WebAuth({\n      domain: 'viet-dev.auth0.com',\n      //process.env.REACT_APP_AUTH0_DOMAIN,\n      clientID: 'PalYUmcqWSfe6TeKptEAn1N25az3OQeU',\n      //process.env.REACT_APP_AUTH0_CLIENTID,\n      redirectUri: 'http://localhost:3000/callback',\n      //process.env.REACT_APP_AUTH0_CALLBACK,\n      responseType: 'token id_token',\n      scope: this.requestedScopes,\n      //the audience is specified in Auth0 as Identifier in settings\n      audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n    });\n  }\n\n  login = () => {\n    localStorage.setItem(\n      REDIRECT_ON_LOGIN,\n      JSON.stringify(this.history.location)\n    ); //remember the page the user was on when redirected\n    this.auth0.authorize();\n  };\n\n  handleAuthentication = () => {\n    // auth0.parseHash - get the data that was passed from the URL and parse it out.\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        //write the data in our session\n        this.setSession(authResult);\n        //redirect location\n        const redirectLocation =\n          localStorage.getItem(REDIRECT_ON_LOGIN) === 'undefined'\n            ? '/'\n            : JSON.parse(localStorage.getItem(REDIRECT_ON_LOGIN) || '');\n        //redirect after login\n        this.history.push(redirectLocation);\n      } else if (err) {\n        this.history.push('/');\n        alert(`Error: ${err.error}`);\n        console.log(err);\n      }\n      localStorage.removeItem(REDIRECT_ON_LOGIN);\n    });\n  };\n\n  setSession = (authResult: any) => {\n    //set the time that the access token will expire\n    const expiresAt = JSON.stringify(\n      authResult.expiresIn * 1000 * new Date().getTime()\n    );\n\n    //scope\n    const scopes = authResult.scope || this.requestedScopes || '';\n\n    localStorage.setItem('access_token', authResult.accessToken);\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n    localStorage.setItem('scopes', JSON.stringify(scopes));\n  };\n\n  isAuthenticated = () => {\n    const expiresAt = JSON.parse(localStorage.getItem('expires_at') || '{}');\n    if (new Date().getTime() < expiresAt) {\n      return true;\n    }\n  };\n\n  logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    localStorage.removeItem('scopes');\n    this.userProfile = null;\n    this.history.push('/');\n    this.auth0.logout({\n      clientID: process.env.REACT_APP_AUTH0_CLIENTID,\n      returnTo: 'http://localhost:3000',\n    });\n  };\n\n  getAccessToken = () => {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      this.login();\n    }\n    return accessToken;\n  };\n\n  // getProfile = (cb: any) => {\n  //   if (this.userProfile) return cb(this.userProfile);\n  //   this.auth0.client.userInfo(this.getAccessToken(), (err, profile) => {\n  //     if (profile) this.userProfile = profile;\n  //     cb(profile, err);\n  //   });\n  // };\n\n  // getProfile = () => {\n  //   this.auth0.client.userInfo(this.getAccessToken(), (err, profile) => {\n  //     console.log(profile);\n  //     return profile;\n  //   });\n  // };\n\n  //checks list of granted scopes\n  userHasScopes = (scopes: any) => {\n    const grantedScopes = JSON.parse(\n      localStorage.getItem('scopes') || ''\n    ).split(' ');\n    // returns true if every scope is found\n    return scopes.every((scope: string) => grantedScopes.includes(scope));\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport Line from '../Line/Line';\n\ninterface Props {\n  title: string;\n}\nconst Title = styled.div`\n  font-family: Abril Fatface, cursive;\n  text-align: center;\n  font-weight: lighter;\n  font-size: calc(18px + 1vmin);\n  margin-block-end: 1em;\n`;\n\nconst PageTitle: React.FunctionComponent<Props> = ({ title }) => (\n  <Title className=\"heading\">\n    <Line />\n    {title}\n    <Line />\n  </Title>\n);\n\nexport default PageTitle;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst LoginButton: React.FunctionComponent = (props: any) => {\n  const { isAuthenticated, login } = props.auth;\n  return (\n    <>\n      {!isAuthenticated() ? (\n        <Button\n          variant=\"outline-secondary\"\n          size=\"lg\"\n          onClick={props.auth.login}\n        >\n          Login\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nexport default LoginButton;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst Logout: React.FunctionComponent = (props: any) => {\n  const { isAuthenticated, login } = props.auth;\n\n  return (\n    <>\n      {isAuthenticated() ? (\n        <Button\n          variant=\"outline-secondary\"\n          size=\"lg\"\n          onClick={props.auth.logout}\n        >\n          Logout\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nexport default Logout;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport LoginButton from '../LoginButton';\nimport LogoutButton from '../Logout';\nimport { companyName } from '../../config/merchantConfig/config';\n\nconst ContainerUl = styled.ul`\n  padding-top: 20px;\n  text-align: center;\n  list-style: none;\n  font-family: 'Abril Fatface', cursive;\n\n  &:hover {\n    color: #282c34;\n  }\n`;\n\nconst ContainerLi = styled.li`\n  display: inline;\n  padding-right: 50px;\n\n  &:hover {\n    color: #282c34;\n  }\n`;\nconst ContainerLogo = styled.li`\n  display: inline;\n  padding-right: 50px;\n  text-align: left;\n\n  &:hover {\n    color: #282c34;\n  }\n`;\n\nconst Menu: React.FunctionComponent = (props: any) => {\n  const { isAuthenticated } = props.auth;\n  return (\n    <div>\n      <ContainerUl>\n        <ContainerLogo>\n          {' '}\n          <NavLink className=\"heading\" to=\"/home\">\n            {companyName}\n          </NavLink>{' '}\n        </ContainerLogo>\n        <ContainerLi>\n          {' '}\n          <NavLink className=\"menu-heading\" to=\"/treatment\">\n            Book Now\n          </NavLink>{' '}\n        </ContainerLi>\n        <ContainerLi>\n          {' '}\n          <NavLink className=\"menu-heading\" to=\"/contact\">\n            Contact\n          </NavLink>{' '}\n        </ContainerLi>\n        <ContainerLi>\n          {isAuthenticated() ? (\n            <NavLink className=\"menu-heading\" to=\"/scopes\">\n              Admin\n            </NavLink>\n          ) : null}{' '}\n        </ContainerLi>\n        <ContainerLi>\n          {!isAuthenticated() ? (\n            <LoginButton {...props} />\n          ) : (\n            <LogoutButton {...props} />\n          )}\n        </ContainerLi>\n      </ContainerUl>\n    </div>\n  );\n};\n\nexport default Menu;\n","const config: any = {\n  API_BASE_URL: process.env.REACT_APP_API_URL!,\n};\n\nexport default config;\n","/* istanbul ignore file */\nimport config from 'config';\n//Availability of treatments\nexport const availability = `${config.API_BASE_URL}/availability`;\n//Book\nexport const book = `${config.API_BASE_URL}/book`;\n//Admin employee days and details on their availability\nexport const employee = `${config.API_BASE_URL}/admin/employee`;\n// export const employeeTreatment = `${config.API_BASE_URL}/employeetreatment`;\nexport const operatingTime = `${config.API_BASE_URL}/admin/operatinghours`;\n// Available treatments\nexport const treatment = `${config.API_BASE_URL}/admin/treatment`;\n// Get appointments booked for that day (Admin Calendar)\nexport const bookedAppointments = `${config.API_BASE_URL}/book`;\n\n// export const workSchedule = `${config.API_BASE_URL}/workschedule`;\n"],"sourceRoot":""}